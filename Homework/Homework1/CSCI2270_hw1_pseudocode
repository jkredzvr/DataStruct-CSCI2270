
/// Justin Chin
/// Assignment 1
/// Course Instructor: Austin Holler

QUESTIONS:
1.  We care about the buy/sell price, but just print out the price of the object in the array...
2.  Am I only suppose to print out each line and the matches in the 1st pseudo code part.  Sorting is separate right?
3.  Use delimiters after each section of work
4.  Sort type alphabetically


cout<<"file read:"<<fileCounter<<endl;
cout<<"search array:"<<searchCounter<<endl; x for number of iterations to find a match in array
cout<<"shift array:"<<shiftCounter<<endl;   y for number of shifts in contents of array



struct item {
	int price;
	string type;
	bool state;
}

item makeItem (parsedString[]){
	
1.	item newItem
2.	newItem.price = parsedString[2].toInt()
3.	newItem.type = parsedString[0]
4.	if(parsedString[1] == "wanted")
5.		newItem.state = 1
6.	else 
7.		newItem.state =0	//selling
8.	return newItem
}

string stringParser[](string rawString){
1.	string parsedString[] = rawString.ParseString by ,
2.	return parsedString;
}

main()
1. cout << enter file name
2. string filename
3. cin >> filename
4. filename.open()
5. string rawString
6. string parsedString[3]

7.	item itemArray[100]
8.	fileCounter = 0
9.	searchCounter = 0
10.	shiftCounter = 0 
11.	lastFilledIndex = 0;


12. while(!filename.endline())
13.		rawString = filename.readline()
14.		fileCounter ++

15.		parsedString = stringParser(rawString)
16.	    item newItem = makeItem(parsedString)
17.		cout<<"item read "<< newItem.type <<" cost "<< newItem.cost<<endl;
		
18.		bool found = false;
19.		searchIndex = 0

20.		while (!found && searchIndex < lastFilledIndex+1)
21.			searchCounter ++
			//check if match
22.			if (itemArray[searchIndex].type == newItem.type && itemArray[searchIndex].state != newItem.state)
23.				if(itemArray[searchIndex].state == 0)      // is the newItem a sell item?
24.					if(itemArray[searchIndex].price <= newItem.price) //is sell <= buy price
25.						found = true;
26.						cout<<itemArray[searchIndex].type<<" "<<itemArray[searchIndex].price<<endl;
27.						removeItemFromIndex(searchIndex)
28.						shiftCounter ++     //shift array...
29.						lastFilledArray -- 	//decrement lastFilled Index
30.					else
31.						continue
32.				else                              //newItem is buy item
33.					if(itemArray[serachIndex].price >= newItem.price) //is buy >= sell price
34.						found = true;
35.						cout<<itemArray[searchIndex].type<<" "<<itemArray[searchIndex].price<<endl;
36.						removeItemFromIndex(searchIndex)
37.						shiftCounter ++     //shift array...
38.						lastFilledArray -- 	//decrement lastFilled Index
39.					else
40.						continue
41.			searchIndex ++
		
42.		if (found) //ie, no matches...
43.			item newItem = makeItem(parasedString)
44.			lastFilledIndex++
45.			itemArray[lastFilledIndex]



//Code for searching an array
//Return -1 if not found
//if ! -1, then actual index found
int searchArray(int inputArray[], int searchValue){
	bool found = false;
	int index = -1; //flag condition to determine if value found in array
	int x=0;

	int num_elements = sizeof( inputArray ) / sizeof( inputArray[0] );

	while(!found && x < num_elements-1){
		if(inputArray[x] == searchValue){
			found = true;
			index = x;
		}
		else{
			x++;
		}
	}
	return index;
}

//Bubble Sort
void bubbleSort(int arr[], int length){
    for(int i=0; i < length; i++){
        for(int j=0; j < length - i; j++){
            if(arr[j] > arr[j+1]){
                int swapVal = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = swapVal;
            }
        }
    }
}

//InsertionSort
void insertionSort(int arr[], int length){
    for( int i=0; i<length; i++){
        int index = arr[i];
        int j = i;
        
        while (j>0 && arr[j-1]>index){
            arr[j] = arr[j-1];
            j=j-1;
        }
        
        arr[j]=index;
    }
}


void quickSort(int arr[], int left, int right){
	int i = left;
	int j = right;
	int pivot = arr[(left+right)/2];

	while (i <= j){
		while(arr[i] < pivot){
			i++;
		}
		while(arr[j] > pivot){
			j--;
		}

		if(i<=j){
			//swap
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;

			i++;
			j--;
		}
	}
	if(left < j){
		quickSort(arr, left, j);

	}
	if(i < right){
		quickSort(arr, i, right);
	}
}